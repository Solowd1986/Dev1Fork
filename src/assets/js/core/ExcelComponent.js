"use strict";

import {DomListener} from "./DomListener";

/*  Данный класс расширяет DomListener, поэтому вызываем super для вызова конструктора DomListener, туда передаем
    элемент-контейнер для компонента и массив слушателей, но тут он часть обьекта опций, эт потому, что для Excel будет также
    прописан свой функционал, который не связан с прослушиванием событий. Этот же конструктор унаследуют все отдельные
    компоненты, такие как Header и Toolbal, производные от ExcelComponents. И вот эти производные компоненты и будут при своем
    создании получать на вход как элемент-контейнер для свои личных шаблонов, так и набор опций, просто логика разбора всего
    этого вынесена в родительские классы, часть в ExcelComponents, а часть сюда, в ExcelComponents
================================
*/
export class ExcelComponents extends DomListener{
    constructor(root, options) {
        super(root, options.listeners);
    }

    /*  Возвращает шаблон компонента, это базовый метод, каждый компонент-наследник реализовывает его по своему.
    ================================
    */
    toHTML() {
        return "";
    }

    /*  Этот метод унаследуют все компоненты, и, вызывая его, будут проводить для себя нужные инициализации, например,
    подвешивания событий на свои эелменты.
    ================================
    */
    init() {
        this.initDomListeners();
    }

    destroy() {
        this.removeDomListeners();
    }


}
